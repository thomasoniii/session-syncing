{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["channel","BroadcastChannel","databases","App","useState","session","login","postMessage","logout","useEffect","addEventListener","e","data","className","href","window","location","target","rel","onChange","value","map","d","key","onClick","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4PAQMA,G,MAAU,IAAIC,iBAAiB,aAG/BC,EAAY,CAChB,aACA,aACA,aACA,YACA,YACA,cACA,iBAyFaC,MAtFf,WAAgB,IAAD,EACYC,mBAAS,IADrB,mBACNC,EADM,KACGC,EADH,OAGIF,oBAAS,WACxB,OAAO,SAAAC,GAILL,EAAQO,YAAYF,GACpBC,EAAM,QANHE,EAHM,oBA0Bb,OARAC,qBAAU,WACRT,EAAQU,iBAAiB,WAAW,SAAAC,GAC9BA,EAAEC,OAASP,GACbC,EAAM,SAGT,CAACD,IAGF,yBAAKQ,UAAU,OACb,kFACA,8EAEE,uBACEC,KAAMC,OAAOC,SAASF,KACtBG,OAAO,SACPC,IAAI,uBAHN,uBAQF,oTAMA,mRAMA,wCACa,IACX,uBAAGJ,KAAK,kDAAR,mDAIF,8DAEE,4BAAQK,SAAU,SAAAR,GAAC,OAAIL,EAAMK,EAAEM,OAAOG,QAAQA,MAAOf,GACtC,KAAZA,GAAkB,uDAClBH,EAAUmB,KAAI,SAAAC,GAAC,OACd,4BAAQC,IAAKD,EAAGF,MAAOE,GACpBA,QAKT,yBAAKT,UAAU,mBACZR,EACC,+DACgC,2BAAIA,IAGpC,yBAGHA,GACC,6BACE,4BAAQmB,QAAS,kBAAMhB,EAAOH,KAA9B,cCxFUoB,QACW,cAA7BV,OAAOC,SAASU,UAEe,UAA7BX,OAAOC,SAASU,UAEhBX,OAAOC,SAASU,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0c36f4c0.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\n\n// BroadcastChannel has been supported for a few years now - chrome's had it since v54, and firefox since 38.\n// Safari does -not- support it.\n// https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API\n\n// here, we just create a shared channel to broadcast our session messages on\nconst channel = new BroadcastChannel(\"sessions\");\n\n// list of databases for demo purposes\nconst databases = [\n  \"bugs_bunny\",\n  \"daffy_duck\",\n  \"elmer_fudd\",\n  \"porky_pig\",\n  \"sylvester\",\n  \"tweety_bird\",\n  \"wile_e_coyote\"\n];\n\nfunction App() {\n  const [session, login] = useState(\"\");\n  // we create and save a logout function that just knows about our login function.\n  const [logout] = useState(() => {\n    return session => {\n      // this is the only important bit - when we log out, post a message to our channel\n      // that we're logging out of this database. The message sent can be any arbitrary data,\n      // not just a string\n      channel.postMessage(session);\n      login(\"\");\n    };\n  });\n\n  // and we establish an effect when we're first loaded to listen to messages on the channel.\n  // if the message is a logout from our current session, then we logout as well.\n  //\n  // NOTE - we call login(\"\") instead of logout() here because we don't want to re-broadcast the\n  // logout message.\n  useEffect(() => {\n    channel.addEventListener(\"message\", e => {\n      if (e.data === session) {\n        login(\"\");\n      }\n    });\n  }, [session]);\n\n  return (\n    <div className=\"App\">\n      <p>Demonstration of communication across browser tabs.</p>\n      <p>\n        Open up as many copies of this page as you want.\n        <a\n          href={window.location.href}\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Open in new window\n        </a>\n      </p>\n      <p>\n        In each window, you can choose to login to whichever database you want.\n        Just select the database from the dropdown menu, and you'll be\n        considered logged in. For example, log into \"bugs_bunny\" in this window,\n        \"bugs_bunny\" in a second window, and \"daffy_duck\" in a third window.\n      </p>\n      <p>\n        Next, in any window you choose, log out of your current database.\n        Observe the other windows - if they were logged into the same database,\n        they'll automatically log out of it. If they were logged into a\n        different database, they'll be unaffected.\n      </p>\n      <p>\n        Code is at{\" \"}\n        <a href=\"https://github.com/thomasoniii/session-syncing\">\n          https://github.com/thomasoniii/session-syncing\n        </a>\n      </p>\n      <div>\n        Select a database to log into:\n        <select onChange={e => login(e.target.value)} value={session}>\n          {session === \"\" && <option>--select database--</option>}\n          {databases.map(d => (\n            <option key={d} value={d}>\n              {d}\n            </option>\n          ))}\n        </select>\n      </div>\n      <div className=\"logged-in-block\">\n        {session ? (\n          <span>\n            You are currently logged into <b>{session}</b>\n          </span>\n        ) : (\n          \"You are not logged in\"\n        )}\n      </div>\n      {session && (\n        <div>\n          <button onClick={() => logout(session)}>Log out</button>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}